/**
@mainpage SETR Mini-Project - Prototyping a thermal process control system using the nordic nRF52840-DK and Zephyr

@brief This is our Mini-Project for our "Embedded and Real-Time Systems" course, with the intention of aquainting us with using Zephyr, and with real
time embedded systems, we were asked to make a thermal process control system using the nordic nRF52840-DK board and a TC47 heat sensor.
This system has a PID controller that is responsible for ensuring that the temperature stays in the desired value.
An user interface is also given through the Board LEDs and Buttons, as well as from UART communication, where various commands can be given to the system.

@details 
<b>Features</b><br>
<ul>
    <li><i>Initialization:</i> Initializing the System and all its components; </li>
    <li><i>Real-Time Database (RTDB):</i> Used to synchronize data between all the modules involved in the project; </li>
    <li><i>Multithreading:</i> Various processes are conducted using threads to guarantee; </li>
    <li><i>UART communication;</i></li>
    <li><i>I²C communication;</i></li>
    <li><i>Board user interface:</i> The nrf52840dk_nrf52840 board buttons and LEDs are used to help the user experience; </li>
    <li><i>Command Processing: </i> The possible commands are all correctly processed; </li>
    <li><i>Collection of data from the TC47 sensor:</i> Functions to aquire the sensor data. </li>
</ul>

<b>System Architecture:</b><br>
<ul>
    <li><i>Real-Time Database (RTDB):</i> Stores the status of the databas variables:</li>
    <ul>
        <li><i>Current temperature:</i> Current temperature being mesured by the heat sensor. </li>
        <li><i>Current setpoint:</i> Temperature setpoint, default is 35ºC. </li>
        <li><i>Max temperature</i> Max allowed temperature, if the system reaches this temperature an error will be issued, default is 100ºC. </li>
        <li><i>Error flag:</i> If theres an error flag on. </li>
        <li><i>System State:</i> Tells if the system is on or off. </li>
        <li><i>PID parameters:</i> Kp, Ti, Td parameters of the PID controller. </li>
    </ul>
    <li><i>UART_Thread:</i> Periodically reads the UART receive buffer and processes the messages.</li>
    <li><i>TC47_Thread:</i> Periodically runs the PID controller and adjusts the heater acordingly.</li>
    <li><i>Control_Thread:</i> Periodically reads the current temperature</li>
</ul>


 <b>System Architecture Diagram:</b><br>
   <img src="https://github.com/CRB611/SETR_TRAB3/blob/main/Sys_Architechture_Diag.png?raw=true" alt="System Architecture" style="width: 800px;"/>



<b>User interface:</b><br>
The user interface can be done through LEDS, Buttons or through UART Communication.
<i>LEDs and Buttons:</i>
<ul>
    <li><b>LED1:</b> Tuns on if the system is on; </li>
    <li><b>LED1:</b> Turns on if the temperature is the desired temperature (+/- 2ºC); </li>
    <li><b>LED2:</b> Turns on if the temperature is 2ºC or more bellow the desired temperature; </li>
    <li><b>LED3:</b> Turns on if the temperature is 2ºC or more above the desired temperature; </li>
    <br>
    <li><b>Button1:</b> Turns the system ON/OFF; </li>
    <li><b>Button2:</b> Increases the desired temperature 1ºC; </li>
    <li><b>Button3:</b> Toggles the RTDB Table display; </li>
    <li><b>Button4:</b> Decreases the desired temperature 1ºC. </li>
</ul>

This communication made in ASCII follow the following format: <b>#CMD DATA CHK!</b> (without the spaces)
<ul>
    <li><b>'#':</b> A char representing the start of the frame; </li>
    <li><b>'!':</b> A char representing the end of the frame; </li>
    <li><b>CMD:</b> A char representing the command; </li>
    <li><b>DATA:</b> Additional data, if required; </li>
    <li><b>CHK:</b> The modulo-256 checksum, which is the numerical sum of the command and data bytes.</li> 
</ul>

The existing commands are:
<ul>
    <li><b>'M':</b> Sets the maximum temperature to the one sent in the data portion; </li>
    <li><b>'D':</b> Sets the desired temperature to the one sent in the data portion; </li>
    <li><b>'S':</b> Sets the PID controller parameters to the ones sent in the data portion; </li>
    <li><b>'C':</b> Returns the current temperature; </li>
    <li><b>'G':</b> Returns the max temperature; </li>
    <li><b>'R':</b> Resets the adjustable RTDB parameters (max temperature, desired temperature, PID parameters); </li>
</ul>




<b>File Structure:</b><br>
<ul>
    <li><b><u>src</u></b> Folder where the main files are:
        <ul>
            <li><i>main.c:</i> Main file, where the tests and the module come together. </li>
        </ul>
    </li> 
    <li><b><u>modules</u></b> Folder where the modules are:
        <ul>
            <li><i>heater.c:</i> Source file containing the heater implementation. </li>
            <li><i>heater.h:</i> Header file containing the functions, structures and macros needed for the heater implementation. </li>
            <li><i>pid.c:</i> Source file containing the PID implementation. </li>
            <li><i>pid.h:</i> Header file containing the functions, structures and macros needed for the PID controller implementation. </li>
            <li><i>rtdb.c:</i> Source file containing the RTDB implementation. </li>
            <li><i>rtdb.h:</i> Header file containing the functions, structures and macros needed for the RTDB implementation. </li>
            <li><i>tc74.c:</i> Source file containing the TC47 implementation. </li>
            <li><i>tc74.h:</i> Header file containing the functions, structures and macros needed for the TC74 implementation. </li>
            <li><i>uart.c:</i> Source file containing the UART helping functions. </li>
            <li><i>uart.h:</i> Header file containing the functions, structures and macros needed for the UART implementation. </li>
        
        </ul>
    </li>
    <li><b><u>tests</u></b> Folder where the test files to use with UNITY are:
        <ul>
            <li><i>testmain.c:</i> Main file where the tests are run; </li>
            <li><i>heater_tests.c:</i> Source file where the tests to the heater module are implemented; </li>
            <li><i>heater_tests.h:</i> Header file containing the functions to test the heater module ; </li>
            <li><i>pid_tests.c:</i> Source file where the tests to the PID module are implemented; </li>
            <li><i>pid_tests.h:</i> Header file containing the functions to test the PID module ; </li>
            <li><i>rtdb_tests.c:</i> Source file where the tests to the rtdb module are implemented; </li>
            <li><i>rtdb_tests.h:</i> Header file containing the functions to test the rtdb module ; </li>
            <li><i>uart_tests.c:</i> Source file where the tests to the UART module are implemented; </li>
            <li><i>uart_tests.h:</i> Header file containing the functions to test the UART module ; </li>
           
        </ul>
    </li>
     <li><b><u>build</u></b> Folder where the object files are generated to.</li>
     <li><b><u>unity</u></b> Folder where the files required to use UNITY are stored.</li>
     <li><b><u>stubs</u></b> Folder where the files the stubs required to emulate the board are stored .</li>
    
     <li><i>CMakeLists.txt:</i> The file that allows us to run the code.</li>
     <li><i>Makefile:</i> The file that allows us to run the tests.</li>
     <li><i>prj.conf:</i> Zephyr configuration file.</li>
     <li><i>nrf52840dk_nrf52840.overlay:</i> Overlay file required to make some changes in the nrf52840dk_nrf52840 board.</li>
</ul>


@author Celina Brito
@author Simão Ribeiro
*/
*/